.controller
%div{"data-role" => "header"}
  %h1 New Search
%div{"data-role" => "content", :role => "main"}
  = form_tag("#", id: "mobile_search_form") do
    = render 'search_box'
    = render partial: "day_time"
    = render partial: "group"
    = render partial: "location"
    .collapsible-set
      %div{"data-collapsed-icon" => "carat-d", "data-expanded-icon" => "carat-u",
      "data-role" => "collapsible", "data-iconpos" => "right"}
        %h3{:class => "sub-heading"}
          More Options
        = render partial: "open_closed"
        = render partial: "special_focus"
        = render partial: "access"
        = render partial: "language"
    = button_to "Search", "#", { :class => "meeting-search-button", "data-role" => "button", "data-icon" => "arrow-r", "data-iconpos" => "right", "rel" => "external" }
= render "footer"
= javascript_include_tag Rails.root.join('app/assets/javascripts/shared/location_agent.js')

:javascript
  function searchFormElement(){
    return $('#mobile_search_form');
  }

  function getFormValues(){
    return searchFormElement().serialize();
  }

  function submitFormUrl(){
    var url = "#{mobile_search_index_path}";
    return url;
  }

  function submitForm(){
    var url = submitFormUrl();
    $.ajax({
      url : url,
      response : 'script',
      data : getFormValues(),
      method : 'post'
    });
  }

  history.pushState("new_search", "New Search", "new");

  function main(){

    $('#mobile_search_form').submit(function(e){
      checkLocation(submitForm);
      e.preventDefault();
      return false;
    });

    var submitButton = $('[type="submit"]');

    // why must i hack so
    setTimeout(function(){
      $('.sub-heading a').css('text-align', 'center');
    }, 0);

    ////////////////////////////////
    //      Menu Controller        //
    ////////////////////////////////
    function MenuController(args){
      this.menuElements = [];
      $('.controller').attr('data', this);
    }

    MenuController.prototype.updateSelection = function(data) {
      var optionsUrl = '#{get_new_options_mobile_search_index_path(format: :json)}';

      $.ajax({
        url: optionsUrl,
        data: data,
        success: function(data){
          this.notifyChange(data);
        }.bind(this)
      });
    }

    MenuController.prototype.notifyChange = function(data){
      // console.log("in notify change");
      var sendData = {};
      _.each(this.menuElements, function(element){

        element.processUpdate(data);
      }.bind(this));

    }

    MenuController.prototype.registerElement = function(element){
      this.menuElements.push(element);
    }
    // end menu controller
    ////////////////////////


    /////////////////////
    // Submit Button   //
    /////////////////////
    function SubmitElement(args){
      this.elementName = "Submit";
      this.hook = $('[type="submit"]');
      this.controller = args["controller"];
      this.controller.registerElement(this);
      this.updates = {};
    }

    SubmitElement.prototype.getSelections = function(data){
      var self = this;

      self.updates[data.source] = data.meetingIds;

      var selections = _.chain(self.updates)
                        .values()
                        .reduce(function(memo, idSet){
                          return _.intersection(memo, idSet);
                        })
                        .flatten()
                        .value();

      return selections;
    }

    SubmitElement.prototype.processUpdate = function(data){
      var self = this;
      var selections = self.getSelections(data);

      var buttonText = 'Show ' + selections.length + ' Meetings';

      self.hook.val(buttonText).button('refresh');
    }
    // end submit element
    ////////////////////////


    ///////////////////
    // Menu Element  //
    ///////////////////
    function MenuElement(args){
      this.elementName = args["elementName"];
      this.hook = $('#' + this.elementName);
      this.setListener();
      this.controller = args["controller"];
      this.controller.registerElement(this);
      this.updates = {};
    }

    MenuElement.prototype.getSelections = function(data){
      var self = this;

      self.updates[data.source] = data.options[self.elementName];
      var selections = _.chain(self.updates)
                        .values()
                        .reduce(function(memo, choiceSet){
                          return _.intersection(memo, choiceSet);
                        })
                        .flatten()
                        .value();

      return selections;
    };

    MenuElement.prototype.processUpdate = function(data){
      var self = this;

      if ( data.source === this.elementName ){
        return;
      }

      var selections = self.getSelections(data);
      var optionsSelector = $(this.hook.find('option'));

      _.each(optionsSelector, function(option){
        if( selections.indexOf( $(option).val() ) < 0 ){
          $(option).attr('disabled', 'disabled');
        } else {
          $(option).attr('disabled', null);
        }
      });
    };

    MenuElement.prototype.setDefault = function(defaultSelection){
      this.hook.val(defaultSelection);
      this.hook.selectmenu('refresh');
    };

    MenuElement.prototype.setListener = function(){
      this.hook.change(function() {
        var data = {
          "source"    : this.elementName,
          "selection" : this.hook.val()
        };

        this.controller.updateSelection(data);
      }.bind(this));
    };

    MenuElement.prototype.currentSelection = function(){
      return this.hook.val();
    }.bind(this);
    // end menu element
    ////////////////////


    //////////////////////////////////
    //   open/closed radio group   //
    /////////////////////////////////

    function RadioGroup(args){
      this.secondary = args["secondary"];
      this.primary = args["primary"];
      this.elementGroup = this.getElements();
      this.updates = {};
      this.setListeners();
      this.controller = args["controller"];
      this.controller.registerElement(this);
    }

    RadioGroup.prototype.getElements = function(){
      return _.map(this.secondary, function(label){
        return this.primary + "_" + label;
      }.bind(this));
    }

    RadioGroup.prototype.getSelections = function(data){
      var self = this;

      self.updates[data.source] = {};
      var selections = {};

      _.each(["open", "closed"], function(open_closed){
        self.updates[data.source[open_closed]] = data.options[open_closed];
        selections[open_closed] = _.chain(self.updates)
                                   .values()
                                   .map(function(optObj){
                                      return optObj[open_closed];
                                    })
                                   .flatten()
                                   .reduce(function(memo, bool){
                                      return memo && bool;
                                    }, true)
                                  .value();
        });

       return selections;
    }

    RadioGroup.prototype.processUpdate = function(data){
      var self = this;

      if ( data.source === this.primary ){
        return;
      }

      var selections = self.getSelections(data);

      var closedSelector = $('#open_closed');
      var openSelector = $('#open_open');
      _.each([closedSelector, openSelector], function(selector){
        if ( !selections[selector.val()] ){
          if ( selector.attr('disabled') !== 'disabled' ) {
            selector.attr('disabled', 'disabled').checkboxradio('refresh');
          }
        } else if ( selections[selector.val()] ){
          if ( selector.attr('disabled') === 'disabled' ) {
            selector.attr('disabled', null).checkboxradio('refresh');
          }
        }
      });

    };

    RadioGroup.prototype.setListeners = function(){
      var self = this;
      _.each(self.elementGroup, function(element){
        $('#' + element).change(function() {
          var data = { 
            "source"    : self.primary,
            "selection" : $('#' + element).val()
          };
          self.controller.updateSelection(data);
        });
      }.bind(this));
    };
    // end open/closed radio element
    ////////////////////

    //////////////////////////////////
    //   open/closed radio group   //
    /////////////////////////////////

    function RadioGroup(args){
      this.secondary = args["secondary"];
      this.primary = args["primary"];
      this.elementGroup = this.getElements();
      this.setListeners();
      this.controller = args["controller"];
      this.controller.registerElement(this);
    }

    RadioGroup.prototype.getElements = function(){
      return _.map(this.secondary, function(label){
        return this.primary + "_" + label;
      }.bind(this));
    }

    RadioGroup.prototype.processUpdate = function(data){
      if ( data.source === this.primary ){
        return;
      }

      var closedSelector = $('#open_closed');
      var openSelector = $('#open_open');
      _.each([closedSelector, openSelector], function(selector){
        if ( !data.options[selector.val()] ){
          if ( selector.attr('disabled') !== 'disabled' ) {
            selector.attr('disabled', 'disabled').checkboxradio('refresh');
          }
        } else if ( data.options[selector.val()] ){
          if ( selector.attr('disabled') === 'disabled' ) {
            selector.attr('disabled', null).checkboxradio('refresh');
          }
        }
      });

    };

    RadioGroup.prototype.setListeners = function(){
      var self = this;
      _.each(self.elementGroup, function(element){
        $('#' + element).change(function() {
          var data = { 
            "source"    : self.primary,
            "selection" : $('#' + element).val()
          };
          self.controller.updateSelection(data);
        });
      }.bind(this));
    };
    // end open/closed radio element
    ////////////////////

    //////////////////////////////////
    //   feature radio group       //
    /////////////////////////////////

    function FeatureRadio(args){
      this.elementName = args["name"];
      this.element = $('.' + this.elementName);
      this.groupName = args["groupName"]
      this.displayName = args["displayName"]
      this.setListeners();
      this.updates = {};
      this.controller = args["controller"];
      this.controller.registerElement(this);
    }

    FeatureRadio.prototype.getEnabled = function(data){
      var self = this;
      self.updates[data.source] =
        data.options[self.groupName].indexOf(self.displayName) >= 0

      var enabled = _.chain(self.updates)
                     .values()
                     .reduce(function(memo, bool){
                      return memo && bool;
                    }, true)
                     .value();

      return enabled;
    }

    FeatureRadio.prototype.processUpdate = function(data){
      var self = this;

      if ( data.source === this.elementName ){
        return;
      }

      var selector = self.element;
      var enabled = self.getEnabled(data);

      if ( !enabled ){
        if ( selector.attr('style') !== "display: none;") {
          selector.toggle('disabled');
        }
      } else if ( enabled ){
        if ( selector.attr('style') === "display: none;") {
          selector.toggle('disabled');
        }
      }
    };

    FeatureRadio.prototype.setListeners = function(){
      var self = this;
      self.element.change(function() {
        var value = self.element.find('input[name="' + self.elementName + '"]:checked').val();
        var data = { 
          "source"    : self.elementName,
          "selection" : value//self.element.find('input[checked="checked"]').val()
        };
        self.controller.updateSelection(data);
      });
    };
    // end feature radio element
    ////////////////////


    function initializeMenu() {
      menuController = new MenuController();

      var dropDowns = ['day', 'city', 'time', 'group_name'];

      _.each(dropDowns, function(name){
        var menuInitializer = { 'controller' : menuController };
        menuInitializer['elementName'] = name;
        new MenuElement(menuInitializer);
      });
    
      openClosedRadios = new RadioGroup({
        "controller" : menuController,
        "primary"    : "open",
        "secondary"  : ["open", "any", "closed"]
      });

      var featureGroup = {
        "foci" : [ { "name" : "men",
                     "displayName" : "Men" },
                   { "name" : "women",
                     "displayName" : "Women" },
                   { "name" : "youth",
                     "displayName" : "Young People" },
                   { "name" : "gay",
                     "displayName" : "Gay" } ],
        "languages" : [ { "name" : "spanish",
                     "displayName" : "Spanish" },
                   { "name" : "french",
                     "displayName" : "French" },
                   { "name" : "polish",
                     "displayName" : "Polish" } ],
        "formats" : [

        ],
        "features" : [ { "name" : "access",
                         "displayName" : "Accessible" },
                       { "name" : "non_smoking",
                         "displayName" : "Non-Smoking" },
                       { "name" : "sitter",
                         "displayName" : "Sitter" } ]
      }

      _.each(_.keys(featureGroup), function(groupName){
        _.each(featureGroup[groupName], function(feature){
          var featureSpecs = {
            "controller" : menuController,
            "name" : feature["name"],
            "groupName" : groupName,
            "displayName" : feature["displayName"],
          }
          featureTest = new FeatureRadio(featureSpecs);
        });
      });

      submitter = new SubmitElement({"controller" : menuController});

    }

    initializeMenu();

  }

  $(document).ready( main() );
